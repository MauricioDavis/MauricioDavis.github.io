<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>固件仿真基础环境搭建</title>
      <link href="/2023/03/23/%E5%9B%BA%E4%BB%B6%E4%BB%BF%E7%9C%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/03/23/%E5%9B%BA%E4%BB%B6%E4%BB%BF%E7%9C%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><em>这边采用的是buildroot+qemu的方式进行环境搭建</em></p><h5 id="buildroot"><a href="#buildroot" class="headerlink" title="buildroot"></a>buildroot</h5><p><strong>buildroot</strong>：Buildroot 是 Linux 平台上一个构建嵌入式 Linux 系统的框架，我们可以使用该框架进行仿真固件</p><ul><li>可以使用buildroot自带的配置文件<code>buildroot/config</code>选择对应的配置<code>make 配置文件名</code>程序就会自动下载所需要的文件并编译，make输出的文件会在outputs文件下，自动生成的运行脚本在<code>buildroot/outputs/images</code></li></ul><p><img src="https://s2.loli.net/2023/03/23/i2XwRmG8onWg1cN.png"></p><ul><li>也可以通过<code>make menuconfig</code>进行类似内核编译前配置的界面对所需要的功能进行选择，save后，make进行编译即可</li></ul><p><img src="https://s2.loli.net/2023/03/23/UTpbZhAFKfumJ2s.png"></p><p>笔者这边使用的就是buildroot自动下载好的文件以及运行脚本(buildroot生成的运行脚本也是基于使用qemu进行模拟的)，固件模拟环境可能需要我们改动一下配置文件才能实现qemu虚拟机和主机互通或者实现自己需要的需求，一般情况<code>make menuconfig</code>里面都可以选择</p><h5 id="qemu虚拟机与虚拟机互通"><a href="#qemu虚拟机与虚拟机互通" class="headerlink" title="qemu虚拟机与虚拟机互通"></a>qemu虚拟机与虚拟机互通</h5><p>目的为可以让虚拟机访问固件启动的web页面和gdbserver调试</p><p><strong>相关介绍一</strong></p><p>tap&#x2F;tun接口：运行在内核的虚拟机接口，我们在搭建的时候就是通过tun口进行交互，tap会输出完整的以太网帧，tun会输出ip报头，搭建的时候使用tunctl创建tun口</p><p><a href="https://www.zhaohuabing.com/post/2020-02-24-linux-taptun/">tun&#x2F;tap详细介绍和使用其实现一些功能</a></p><ol><li>自己编写一个启动脚本，使用brctl创建虚拟网桥并配置ip地址</li><li>使用tunctl创建名为tap0的tun接口并配置ip</li><li>将tap0口接入虚拟网桥</li><li>我们还需要将buildroot自动生成的启动脚本与tap0口相连</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/bin/sh</span></span><br><span class="line">sudo brctl addbr virbr0</span><br><span class="line">sudo ifconfig virbr0 192.168.247.55/24 up</span><br><span class="line">sudo tunctl -t tap0</span><br><span class="line">sudo ifconfig tap0 192.168.247.56/24 up</span><br><span class="line">sudo brctl addif virbr0 tap0</span><br><span class="line">sudo ./start-qemu.sh</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">(</span><br><span class="line">BINARIES_DIR=<span class="string">&quot;<span class="variable">$&#123;0%/*&#125;</span>/&quot;</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;BINARIES_DIR&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;1&#125;</span>&quot;</span> = <span class="string">&quot;serial-only&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    EXTRA_ARGS=<span class="string">&#x27;-nographic&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    EXTRA_ARGS=<span class="string">&#x27;-serial stdio&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/home/davis/buildroot/output/host/bin:<span class="variable">$&#123;PATH&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">exec</span> qemu-system-mipsel -M malta -kernel vmlinux</span><br><span class="line">-drive file=rootfs.ext2,format=raw -append <span class="string">&quot;rootwait root=/dev/sda&quot;</span> </span><br><span class="line">-drive file=/share.img,format=raw  -net nic,macaddr=00:16:3e:00:00:01 </span><br><span class="line">-net user  </span><br><span class="line">-net tap,ifname=tap0,script=no,downscript=no  <span class="variable">$&#123;EXTRA_ARGS&#125;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完成上述操作后就可以ping通虚拟机了</p><h5 id="qemu虚拟机与虚拟机传输文件"><a href="#qemu虚拟机与虚拟机传输文件" class="headerlink" title="qemu虚拟机与虚拟机传输文件"></a>qemu虚拟机与虚拟机传输文件</h5><p>wait a minuet ：说这个的原因是因为，笔者这边使用buildroot自生成的脚本运行，竟然没有service指令，那就开不了ssh，加之有没有网，所以这边使用mount挂载的方式传输</p><ol><li><p>可以使用<code>qemu-img</code>创建或者使用<code>dd</code>命令创建<br>eg：<code>qemu-img xxx.img 500m</code>    或者     <code>dd if=/dev/zero of=./xxx.img bs=1M count=500</code></p></li><li><p>使用<code>mkfs.ext4/ext2  xxx.img</code> 进行格式化</p></li><li><p>mount将xxx.img挂载到一个文件夹下，可以在&#x2F;tmp&#x2F; 随便创建一个挂载，此时将需要传输的文件放入该文件夹</p></li><li><p>修改qemu启动时的参数加入这个xxx.img文件作为一块硬盘，参考上面的运行脚本</p></li><li><p>使用fdisk -l查看加入的硬盘名字挂载到&#x2F;dev&#x2F;sdx</p></li></ol><p><img src="https://s2.loli.net/2023/03/23/UFQ9MSKH1mC5byf.png"></p><ol start="7"><li>在qemu虚拟机中使用<code>mount -t ext4（如果mkfs格式化为ext4的话） /xxx</code><br>将其挂载到&#x2F;xxx，具体看你想挂载到哪里</li><li>此时qemu虚拟机里就有对应的文件了</li></ol><br><p>注：buildroot自动生成的qemu启动脚本中要求 命令行参数1需要为<code>serial-only</code>否则我们按<code>ctrl c</code>会直接退出qemu</p><p><a href="https://cloud.tencent.com/developer/article/2066731?from=15425&areaSource=102001.1&traceId=l2kBkZlnO3s1USUbw9FDx">mount指令详解</a><a href="https://blog.csdn.net/weixin_36179469/article/details/116775194">qemu虚拟机与宿主机使用mount进行文件传输</a></p><p><a href="https://blog.csdn.net/weixin_36179469/article/details/116775194">qemu虚拟机与宿主机使用mount进行文件传输</a></p><p><a href="https://www.bbsmax.com/A/1O5Eo8V8z7/">mount挂载实质以及不同参数挂载的区别，强烈建议学习</a></p>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 固件仿真 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qemu使用介绍及参数</title>
      <link href="/2023/03/21/qemu%E5%8F%82%E6%95%B0/"/>
      <url>/2023/03/21/qemu%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>使用者模式</strong></p><p><strong><code>使用者模式：</code></strong></p><ol><li><p>直接用对应架构的qemu运行对应程序(静态链接程序)<br>eg：<code>./qemu-mips file</code></p></li><li><p>使用sudo chroot更改程序执行根目录为当前目录(动态链接程序)<br>eg：<code>sudo chroot .   ./qemu-mips file</code></p></li></ol><p><strong>系统模式</strong></p><p><a href="https://people.debian.org/~aurel32/qemu/">debian下载qemu需要使用的文件</a></p><p> 参数</p><p><code>-initrd</code> 指定初始化ram映像，系统在引导过程临时将其挂载为根目录来辅助引导过程，搜索linux文件系统格式就可以知道可以有那些格式，文件中包含引导过程需要的一些工具，一般我们要指定的话可以去debian官网下载，其中包含内核文件和initrd文件直接使用即可</p><p><a href="https://baike.baidu.com/item/initrd/3239796?fr=aladdin">initrd详细介绍</a><br><a href="https://zhuanlan.zhihu.com/p/582152006">自制initrd文件范例</a></p><p><code>-hdx</code> 指定硬盘映像，也是直接去debian下载就好，自制的话这里随便找了一篇文章参考，用buildroot自动生成的脚本没有使用-hda，然而mkdir都不行，估计是不指定的话就没有磁盘空间所以不能创建新文件。<code>默认是从abcd开始的所以可以是-hda</code></p><p><a href="https://www.qemu.org/docs/master/system/images.html#quick-start-for-disk-image-creation">使用qemu-img制作硬盘映像-官方文档</a><br><a href="%5B(31%E6%9D%A1%E6%B6%88%E6%81%AF">qemu-img制作·····—博客</a> KVM&amp;QEMU学习笔记（一）_qemu -hda_Aixs的博客-CSDN博客](<a href="https://blog.csdn.net/z770816239/article/details/53514418">https://blog.csdn.net/z770816239/article/details/53514418</a>))<br><a href="https://wenku.baidu.com/view/4de0d4fb30d4b14e852458fb770bf78a65293ac0.html?_wkts_=1679361010659&bdQuery=qemu+%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0+-append">使用dd，mkfs自制硬盘映像</a></p><p><code>-M</code> 指定板子型号，通过搜索-M tab 列出的内容，理论来说我们仿真的时候就会确定对应路由器应该是可以搜到对应的板子型号</p><p><code>-net 网卡名</code>  模拟环境启动后创建网卡</p><p><code>-net tap</code>  一般用于指定qemu虚拟机连接到虚拟机的tap接口<br>eg：-net tap,ifname&#x3D;tap名字</p><p>eg：<code>-net eth0，macaddr=mac地址，ifname=top0</code>(设置改网卡为网关)，<code>script=no,downscript=no</code> ，后面两个如果是配置网关则加上去，默认网络配置脚本是 <code>/etc/qemu-ifup</code>，默认网络取消配置脚本是 <code>/etc/qemu-ifdown</code>。使用<code>script=no</code>或<code>downscript=no</code>禁用脚本执行。</p><p><code>-nographic</code> 关闭图形窗口</p><p><code>-drive</code>  指定驱动映像，可以使用其代替-hda使用<br>eg：if&#x3D;sd,file&#x3D;debian_wheezy_armhf_standard.qcow2<br>if 接口类型     file   映像文件</p><p><code>-device</code> 一般用不到暂放</p><p><a href="%5B(31%E6%9D%A1%E6%B6%88%E6%81%AF">device参考</a> qemu安装及设备添加_qemu加载usb设备_司空追星！的博客-CSDN博客](<a href="https://blog.csdn.net/qq_43644573/article/details/126998814">https://blog.csdn.net/qq_43644573/article/details/126998814</a>))</p><p><code>-append</code> 指定命令行启动参数，这里不知道为什么大家的启动脚本都是设置为root&#x3D;&#x2F;dev&#x2F;sda1，意思就是指定&#x2F;dev&#x2F;sda1设备为根目录，其他指定参数大家想要了解的话可以参考下面的文章</p><p>[linux启动参数](<a href="https://www.cnblogs.com/kerndev/p/5537408.html">Linux启动参数 - 星沉地动 - 博客园 (cnblogs.com)</a>)<br>[内核启动参数详解，下面一点的位置有介绍需要那些参数，文件前是分析内核启动文件](<a href="https://www.dandelioncloud.cn/article/details/1555737208827367425">内核启动参数详解-蒲公英云 (dandelioncloud.cn)</a>)</p><p>启动脚本参考</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo qemu-system-mips \  </span><br><span class="line">    -M malta -kernel vmlinux-3.2.0-4-4kc-malta \  </span><br><span class="line">    -hda debian_wheezy_mips_standard.qcow2 \  </span><br><span class="line">    -append <span class="string">&quot;root=/dev/sda1 console=tty0&quot;</span> \  </span><br><span class="line">    -net nic,macaddr=00:16:3e:00:00:01 \  </span><br><span class="line">    -net tap,ifname=tap0,script=no,downscript=no \  </span><br><span class="line">    -nographic</span><br></pre></td></tr></table></figure><p><a href="https://www.qemu.org/docs/master/system/invocation.html">qemu官方文档，不要多想不知道看官方文档为上策</a></p>]]></content>
      
      
      <categories>
          
          <category> IOT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qemu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简介</title>
      <link href="/2023/03/11/%E7%AE%80%E4%BB%8B/"/>
      <url>/2023/03/11/%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
